import numpy as np

#a function to generate a random hypervector of length D filled with an equal amount of 1 and -1.
def genRandomHV(D):
	if D%2 == 1:
		print("Dimension is odd!")
	else:
		randomIndex = np.random.permutation(D) 							#create a D array with random permutations
		entries = range(D)
		randomHV = np.zeros((len(entries),))							#preallocate array, from chrisschell.de
		half = D/2
		randomHV[np.where(randomIndex < half)] = 1; 					#find permutation array < half, those index set to 1
		randomHV[np.where(randomIndex >= half)] = -1;					#^^^^^ same, but set to -1
		#print(np.mean(randomHV)) 										for testing the random hypervector function
		return randomHV

# this function takes in an item memory (in MATLAB, essentially a 2D array
# designed for easy lookups and data matching, see MATLAB documentation, a key
# (which is a values name to search for, in this case each trigram has a corresponding
# HV if the key (or trigram) isn't present, it is created with genRandomHV
# for this implementation, a dictionary will be used

def lookupItemMemory(itemMemory, key, D):
	if key in itemMemory:
		randomHV = itemMemory[key]										#found the key!
	else:
		itemMemory[key] = genRandomHV(D)
		randomHV = itemMemory[key]
	return itemMemory, randomHV
		
		
# this function computes the sum of hypervecotors
# TODO --- READ PAPER AND LEARN THIS FX BETTER
def computeSumHV (buff, itemMemory, N, D):
	#init
	block = np.zeros((N,D))
	sumHV = np.zeros((1, D))
	
	for numItems in range(0, np.size(buff)):
		key = buff[numItems]
		
		block = np.roll(block, 1, [0,1])
		itemMemory, block[1,:] = lookupItemMemory(itemMemory, key, D)
		
		if numItems >= N:
			nGrams = block[1, :]
			for i in range(1,N):
				nGrams = nGrams * block[i, :]
			sumHV = sumHV + nGrams
	return itemMemory, sumHV


def binarizeHV (v):														#v is a hyper vector
	threshold = 0
	for i in v:
		if v[i] < threshold:
			v[i] = 1
		else:
			v[i] = -1

def binarizeLanguageHV (langAM):
	#langLabels = np.array(['afr', 'bul', 'ces', 'dan', 'nld', 'deu', 'eng', 'est', 'fin', 'fra', 'ell', 'hun', 'ita', 'lav', 'lit', 'pol', 'por', 'ron', 'slk', 'slv', 'spa', 'swe'])
	langLabels = np.array(['afr'])
	
	for j in range(0, np.size(langLabels)):
		v = langAM[langLabels[j]]
		langAM[langLabels[j]] = binarizeHV(v)
	return langAM

def buildLanguageHV (N, D):
	iM = {}																#dictionary type
	langAM = {}
	#langLabels = np.array(['afr', 'bul', 'ces', 'dan', 'nld', 'deu', 'eng', 'est', 'fin', 'fra', 'ell', 'hun', 'ita', 'lav', 'lit', 'pol', 'por', 'ron', 'slk', 'slv', 'spa', 'swe'])
	langLabels = np.array(['afr'])
	
	for i in range(0, np.size(langLabels)):
		fileAddress = '../training_texts/' + langLabels[i] + '.txt'
		buff = np.genfromtxt(fname = fileAddress, dtype = 'str')
		print('loaded training file: ' + fileAddress)					#open training file from training_texts
		
		iM, langHV = computeSumHV(buff, iM, N, D);
		langAM[langLabels[i]] = langHV
	

if __name__ == '__main__':
    D = 10000
    N = 4
    iM, langAM = buildLanguageHV(N,D)
    
